//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LoginActivity.Generator {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeTypeAuthenticate", Namespace="http://schemas.datacontract.org/2004/07/WebService")]
    [System.SerializableAttribute()]
    public partial class CompositeTypeAuthenticate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAuthentifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenApiField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAuthentified {
            get {
                return this.IsAuthentifiedField;
            }
            set {
                if ((this.IsAuthentifiedField.Equals(value) != true)) {
                    this.IsAuthentifiedField = value;
                    this.RaisePropertyChanged("IsAuthentified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TokenApi {
            get {
                return this.TokenApiField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenApiField, value) != true)) {
                    this.TokenApiField = value;
                    this.RaisePropertyChanged("TokenApi");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Generator.IGenerator")]
    public interface IGenerator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenerator/DoWork", ReplyAction="http://tempuri.org/IGenerator/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenerator/DoWork", ReplyAction="http://tempuri.org/IGenerator/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenerator/Authenticate", ReplyAction="http://tempuri.org/IGenerator/AuthenticateResponse")]
        LoginActivity.Generator.CompositeTypeAuthenticate Authenticate(string username, string password, string tokenApi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenerator/Authenticate", ReplyAction="http://tempuri.org/IGenerator/AuthenticateResponse")]
        System.Threading.Tasks.Task<LoginActivity.Generator.CompositeTypeAuthenticate> AuthenticateAsync(string username, string password, string tokenApi);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGeneratorChannel : LoginActivity.Generator.IGenerator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GeneratorClient : System.ServiceModel.ClientBase<LoginActivity.Generator.IGenerator>, LoginActivity.Generator.IGenerator {
        
        public GeneratorClient() {
        }
        
        public GeneratorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GeneratorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeneratorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeneratorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public LoginActivity.Generator.CompositeTypeAuthenticate Authenticate(string username, string password, string tokenApi) {
            return base.Channel.Authenticate(username, password, tokenApi);
        }
        
        public System.Threading.Tasks.Task<LoginActivity.Generator.CompositeTypeAuthenticate> AuthenticateAsync(string username, string password, string tokenApi) {
            return base.Channel.AuthenticateAsync(username, password, tokenApi);
        }
    }
}
